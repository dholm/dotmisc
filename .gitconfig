[color]
    ui = auto
    diff = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
    upstream = normal bold
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red
    new = green

[format]
    pretty = format:%C(blue)%ad%C(reset) %x09%C(yellow)%h%C(green)%d%C(reset) %C(blue)%s %C(magenta) [%an]%C(reset)

[grep]
    extendedRegexp = true

[mergetool]
    prompt = no
[mergetool "vim"]
    cmd = vim -f -c 'Gdiff' $MERGED
    keepbackup = false
[mergetool "emacs"]
    cmd = emacs -Q -nw -l ~/.emacs.d/basic.el --mergetool $LOCAL $REMOTE $BASE $MERGED
[merge]
    summary = true
    verbosity = 1
    tool = "emacs"
    stat = true

[branch]
    autosetupmerge = true

[push]
    default = tracking

[core]
    pager = "less -RXMi"
    autocrlf = false
    editor = "vim --noplugin"
    whitespace = cr-at-eol,trailiing-space,space-before-tab,tabwidth=8
    preloadindex = true
    excludesfile = ~/.gitignore.core

[advice]
    statusHints = false

[difftool]
    prompt = no
[difftool "emacs"]
    cmd = emacs -Q -nw -l ~/.emacs.d/basic.el --difftool $LOCAL $REMOTE
[diff]
    mnemonicprefix = true
    renames = true
    renamelimit = 3000
[difftool]
    prompt = false

[rerere]
    enabled = true

[alias]
    ###
    # Help commands.
    ls-alias = !git config -l | grep alias | cut -c 7- | sed -e s/=/¤/ | column -t -s ¤ | grep -v ls-alias

    ###
    # Locating content and paths.
    root = rev-parse --show-toplevel
    find-file = "!f() { git ls-files | egrep "$1"; }; f"
    find-string = log --diff-filter=M --patch -S
    when-rm = log --diff-filter=D --summary --
    when-add = log --diff-filter=A --name-status
    grp = grep --break --heading --line-number
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

    ###
    # Reviewing changes.
    diff-intercommit = !sh -c 'interdiff <(git show $1) <(git show $2) | less -FRS' -
    diff-func = !sh -c \"git show \\\"\\$0:\\$2\\\" | sed -n \\\"/^[^ \\t].*\\$3[ \\t]*(/,/^}/p\\\" > .tmp1 && git show \\\"\\$1:\\$2\\\" | sed -n \\\"/^[^ \\t].*\\$3[ \\t]*(/,/^}/p\\\" > .tmp2 && git diff --no-index .tmp1 .tmp2\"
    diff-sort = !sh -c 'git diff "$@" | grep "^[+-]" | sort --key=1.2 | uniq -u -s1'
    diff-fork = !bash -c 'git diff $(git merge-base "$1" "$2") "$2" "${@: 3}" ' -

    ###
    # Publishing changes.
    mbox-send = "!bash -c 'eval f=\\$$#; eval set -- `seq -f\"\\$%.0f\" 1 $(($#-1))`; mkdir .mboxsplit || exit; trap \"st=\\$?; rm -rf .mboxsplit; exit \\$?\" 0 INT TERM; if last=`git mailsplit -d4 -o.mboxsplit -b -- \"$f\"`; then echo Found $last messages in \"$f\"; git send-email \"$@\" .mboxsplit; fi' -"

    ###
    # Finding refspecs.
    head = rev-list -n1 --abbrev-commit HEAD
    latest-tag = describe --tags --abbrev=0
    find-hash = "!sh -c 'git rev-list --all | grep ^$1 | while read commit; do git --no-pager log -n1 --pretty=format:\"%H %ci %an %s%n\" $commit; done' -"
    oneline ="!_() { $(test $# -eq 0 && echo xargs -L1) git log --no-walk --decorate --oneline \"$@\"; }; _"
    tips = "!_() { t=$(git rev-list --no-merges --max-count=1 \"$@\"); if test -n \"$t\"; then echo $t; _ \"$@\" ^$t; fi; }; _"
    hash-empty-tree = hash-object -t tree /dev/null

    ###
    # Reviewing history.
    log-new = log ORIG_HEAD..
    logb = log --first-parent
    logb-new = log --first-parent ORIG_HEAD..
    logg = log --graph --decorate --abbrev-commit --date=relative
    logg-new = log --graph --decorate --abbrev-commit --date=relative ORIG_HEAD..
    logs = log --graph --decorate --abbrev-commit --date=relative --stat
    logs-new = log ORIG_HEAD.. --stat --no-merges
    logl = log --graph --decorate --format=full --stat
    logl-new = log ORIG_HEAD.. --graph --decorate --format=full --stat --no-merges
    logp = log --graph --decorate --abbrev-commit --date=relative --patch --cc -w
    logp-new = log --graph --decorate --abbrev-commit --date=relative --patch --cc -w ORIG_HEAD..
    graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

    ##
    # Common commands that ignore changes to whitespace.
    shw = show --ignore-all-space
    dff = diff --ignore-all-space
    mrg = merge -Xignore-space-at-eol
    rbs = rebase -Xignore-space-at-eol

    ###
    # Manipulating file states.
    unmerge = checkout -m
    edit-unmerged = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; ${EDITOR} `f`"
    add-unmerged = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; git add `f`"
    ls-assume = !git ls-files -v | grep ^h | cut -c 3-
    assume = update-index --assume-unchanged
    assume-all = !git st -s | awk {'print $2'} | xargs git assume
    unassume = update-index --no-assume-unchanged
    unassume-all = !git assumed | xargs git update-index --no-assume-unchanged
    record = !sh -c '(git add -p -- $@ && git commit) || git reset' --
    untrack = rm --cache --

    ###
    # Manipulating branches.
    branch-done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done/{}; }; f"

    ###
    # Manipulating submodules.
    checkout-recurse = !sh -c 'git checkout $1 && git submodule update --recursive' -

    ###
    # Managing remotes.
    remote-prune-all = !git remote | xargs -n 1 git remote prune

    ###
    # Server commands.
    serve = daemon --reuseaddr --verbose  --base-path=. --export-all ./.git

[include]
    path = .gitconfig.local

[difftool "ediff"]
    cmd = $HOME/.dotfiles/misc/bin/ediff.sh "$LOCAL" "$REMOTE" "$MERGED"
[mergetool "ediff"]
    cmd = $HOME/.dotfiles/misc/bin/ediff.sh "$LOCAL" "$REMOTE" "$MERGED" "$BASE"
    trustExitCode = true
