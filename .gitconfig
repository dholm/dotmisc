[init]
    templatedir = ~/.local/libexec/git/templates

[color]
    ui = auto
    diff = auto
    status = auto
    branch = auto
    interactive = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
    upstream = normal bold
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red
    new = green
    whitespace = red reverse

[core]
    pager = "less -RXMi"
    autocrlf = false
    editor = "vim --noplugin"
    whitespace = cr-at-eol,trailiing-space,space-before-tab,tabwidth=8
    preloadindex = true
    excludesfile = ~/.gitignore.core

[format]
    pretty = format:%C(blue)%ad%C(reset) %x09%C(yellow)%h%C(green)%d%C(reset) %C(blue)%s %C(magenta) [%an]%C(reset)

[advice]
    statusHints = false

[log]
    follow = true

[grep]
    extendedRegexp = true

[branch]
    autosetupmerge = true

[push]
    default = tracking

[diff]
    mnemonicprefix = true
    renames = copies
    renamelimit = 999999
[diff "odf"]
    binary = true
    textconv = odt2txt

[difftool]
    prompt = no
    tool = "emacs"
[difftool "ediff"]
    cmd = $HOME/.dotfiles/misc/bin/ediff.sh "$LOCAL" "$REMOTE" "$MERGED"
[difftool "emacs"]
    cmd = emacs -Q -nw -l ~/.emacs.d/basic.el --difftool $LOCAL $REMOTE

[merge]
    summary = true
    verbosity = 1
    tool = "emacs"
    stat = true

[mergetool]
    prompt = no
[mergetool "vim"]
    cmd = vim -f -c 'Gdiff' $MERGED
    keepbackup = false
[mergetool "emacs"]
    cmd = emacs -Q -nw -l ~/.emacs.d/basic.el --mergetool $LOCAL $REMOTE $BASE $MERGED
[mergetool "ediff"]
    cmd = $HOME/.dotfiles/misc/bin/ediff.sh "$LOCAL" "$REMOTE" "$MERGED" "$BASE"
    trustExitCode = true

[rerere]
    enabled = true

[alias]
    ###
    # Help commands.
    ls-alias = !git config -l | grep alias | cut -c 7- | sed -e s/=/¤/ | column -t -s ¤ | grep -v ls-alias | sort

    ###
    # Locating content and paths.
    root = rev-parse --show-toplevel
    find-file = "!f() { git ls-files | egrep "$1"; }; f"
    find-string = log --diff-filter=M --patch -S
    grep-verbose = grep --break --heading --line-number
    when-rm = log --diff-filter=D --summary --
    when-add = log --diff-filter=A --name-status
    whois = !bash -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
    whereis = log --source --all -S
    follow-author = "!f() { local author="$1"; shift; git log --patch --stat --author="${author}" -- "$*"; }; f"
    follow-path = log --patch --find-renames --follow --stat --

    ###
    # Reviewing changes.
    diff-word = diff -M -p --stat -w --word-diff=color
    show-word = show -M -p --stat -w --word-diff=color
    diff-char = diff -M -p --stat -w --word-diff=color --word-diff-regex=.
    show-char = show -M -p --stat -w --word-diff=color --word-diff-regex=.
    diff-intercommit = !bash -c 'interdiff <(git show $1) <(git show $2) | less -FRS' -
    diff-func = !bash -c \"git show \\\"\\$0:\\$2\\\" | sed -n \\\"/^[^ \\t].*\\$3[ \\t]*(/,/^}/p\\\" > .tmp1 && git show \\\"\\$1:\\$2\\\" | sed -n \\\"/^[^ \\t].*\\$3[ \\t]*(/,/^}/p\\\" > .tmp2 && git diff --no-index .tmp1 .tmp2\"
    diff-sort = !bash -c 'git diff "$@" | grep "^[+-]" | sort --key=1.2 | uniq -u -s1'
    diff-fork = !bash -c 'git diff $(git merge-base "$1" "$2") "$2" "${@: 3}" ' -

    ###
    # Publishing changes.
    mbox-send = "!bash -c 'eval f=\\$$#; eval set -- `seq -f\"\\$%.0f\" 1 $(($#-1))`; mkdir .mboxsplit || exit; trap \"st=\\$?; rm -rf .mboxsplit; exit \\$?\" 0 INT TERM; if last=`git mailsplit -d4 -o.mboxsplit -b -- \"$f\"`; then echo Found $last messages in \"$f\"; git send-email \"$@\" .mboxsplit; fi' -"
    diff-to-upstream = !git log --oneline --first-parent --reverse @{u}... && git diff 8.x... > $1 && git diff @{u} > interdiff.txt && echo

    ###
    # Updating repository.
    checkout-recurse = !bash -c 'git checkout $1 && git submodule update --recursive' -
    clean-all = clean --force -x -d
    fetch-all = fetch --all --prune --tags --recurse-submodules --progress
    pull-unclean = pull --autostash
    submodule-update = !git submodule sync && git submodule update --init

    ###
    # Finding refspecs.
    head = rev-list -n1 --abbrev-commit HEAD
    latest-tag = describe --tags --abbrev=0
    find-hash = "!bash -c 'git rev-list --all | grep ^$1 | while read commit; do git --no-pager log -n1 --pretty=format:\"%H %ci %an %s%n\" $commit; done' -"
    oneline = "!_() { $(test $# -eq 0 && echo xargs -L1) git log --no-walk --decorate --oneline \"$@\"; }; _"
    tips = "!_() { t=$(git rev-list --no-merges --max-count=1 \"$@\"); if test -n \"$t\"; then echo $t; _ \"$@\" ^$t; fi; }; _"
    hash-empty-tree = hash-object -t tree /dev/null
    upstream = !git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)
    current-branch = name-rev --name-only HEAD
    lost-commits = !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"
    local-changes = !"git log origin/master.. --format='%Cred%h%Creset;%C(yellow)%an%Creset;%H;%Cblue%f%Creset' | git name-rev --stdin --always --name-only | column -t -s';'"

    ###
    # Reviewing history.
    log-new = log ORIG_HEAD..
    log-branch = log --first-parent
    log-branch-new = log --first-parent ORIG_HEAD..
    log-graph = log --graph --decorate --abbrev-commit --date=relative
    log-graph-new = log --graph --decorate --abbrev-commit --date=relative ORIG_HEAD..
    log-graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
    log-stat = log --graph --decorate --abbrev-commit --date=relative --stat
    log-stat-new = log ORIG_HEAD.. --stat --no-merges
    log-long = log --graph --decorate --format=full --stat
    log-long-new = log ORIG_HEAD.. --graph --decorate --format=full --stat --no-merges
    log-patch = log --graph --decorate --abbrev-commit --date=relative --patch --cc -w
    log-patch-new = log --graph --decorate --abbrev-commit --date=relative --patch --cc -w ORIG_HEAD..
    reflog-pretty = reflog --pretty='%C(blue)%cd%C(reset) %C(yellow)%h%C(reset) %C(green)%gd%C(reset) %C(blue)%gs%C(reset)'
    contributors = "!f() { git log --pretty=format:%aN ${1:-} | sort | uniq -c | sort -rn; }; f"

    ##
    # Common commands that ignore changes to whitespace.
    cherry-pick-nows = cherry-pick -Xignore-all-space
    diff-nows = diff --ignore-all-space
    format-patch-nows = format-patch --ignore-all-space
    merge-nows = merge -Xignore-all-space
    rebase-nows = rebase -Xignore-all-space
    show-nows = show --ignore-all-space

    ###
    # Listing files based on state.
    ls = "!git status -suno"
    ls-added = "!git status --porcelain -uno | awk 'match($1, /A/) {print $2}'"
    ls-copied = "!git status --porcelain -uno | awk 'match($1, /C/) {print $2}'"
    ls-deleted = "!git status --porcelain -uno | awk 'match($1, /D/) {print $2}'"
    ls-ignored = ls-files --others --ignored --exclude-standard
    ls-ignored-tracked = ls-files --cached --ignored --exclude-standard
    ls-modified = "!git status --porcelain -uno | awk 'match($1, /M/) {print $2}'"
    ls-renamed = "!git status --porcelain -uno | awk 'match($1, /R/) {print $2}'"
    ls-staged = "!git status --porcelain -uno | grep -P '^[MA]' | awk '{print $2 }'"
    ls-unmerged = !git --no-pager diff --name-only --diff-filter=U
    ls-untracked = "!git status --porcelain -uall | awk '$1 == \"??\" {print $2}'"
    ls-updated = "!git status --porcelain -uno | awk 'match($1, /U/) {print $2}'"

    ###
    # Manipulating file states.
    unmerge = checkout -m
    edit-unmerged = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; ${EDITOR} `f`"
    add-unmerged = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; git add `f`"
    ls-assume = !git ls-files -v | grep ^h | cut -c 3-
    assume = update-index --assume-unchanged
    assume-all = !git st -s | awk {'print $2'} | xargs git assume
    unassume = update-index --no-assume-unchanged
    unassume-all = !git assumed | xargs git update-index --no-assume-unchanged
    record = !bash -c '(git add -p -- $@ && git commit) || git reset' --
    untrack = rm --cache --
    ignore = !bash -c '([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore'
    sync-rm = !git ls-files -z --deleted | xargs -0 git rm
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

    ###
    # Manipulating history.
    extract-directory = "!f() { git filter-branch --subdirectory-filter ${1} -- ${2:-master}; }; f"
    rewrite-root = "!f() { git filter-branch --prune-empty --tree-filter \"if [ ! -e ${1} ]; then mkdir -p ${1}; git ls-tree --name-only \\${GIT_COMMIT} | xargs -I files mv files ${1}; fi\"; }; f"
    rewrite-rm-unless = "!f() { git filter-branch -f --prune-empty --index-filter \"git rm --cached --ignore-unmatch \\$(git ls-files | grep -v '${1}')\"; }; f"

    ###
    # Committing changes.
    fixup = commit --amend --reuse-message HEAD
    undo = reset --mixed HEAD~1
    uncommit = reset --soft HEAD~1
    recommit = commit --reuse-message ORIG_HEAD

    ###
    # Manipulating branches.
    branch-done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done/{}; }; f"
    rm-delivered = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
    rm-branch = !git branch -d $1 && git push origin --delete

    ###
    # Manipulating files.
    grep-rename = "!f() { git grep -l \"${1}\" ${GIT_PREFIX}${3:-} | xargs sed -i '' -e \"s/${1}/${2}/g\"; }; f"

    ###
    # Working with tags.
    ls-tags = !git for-each-ref --sort=subject refs/tags | awk '{print $2, $3}' | sed 's,tag refs/tags/, * ,' | sed 's,commit refs/tags/,   ,'

    ###
    # Managing remotes.
    remote-prune-all = !git remote | xargs -n 1 git remote prune

    ###
    # Archiving.
    tar = "!f() { local ref=${2:-$(git head)}; git archive --format tar --output ${1:-${ref}.tar} ${ref}; }; f"
    tar-xz = "!f() { local ref=${2:-$(git head)}; git archive ${ref} | xz >${1:-${ref}.tar.xz}; }; f"
    zip = "!f() { local ref=${2:-$(git head)}; git archive --format zip --output ${1:-${ref}.zip} ${ref}; }; f"

    ###
    # Importing.
    sourceforge-cvsimport = "!f() { rsync -av rsync://${2:-${1}.cvs.sourceforge.net/cvsroot/${1}}/\\* ${1}-cvs && git cvsimport -v -a -k -d $(pwd)/${1}-cvs -C ${1} ${1}; }; f"

    ###
    # GitHub helpers.
    github-open = "!f() { url=$(echo $(git config --get remote.origin.url) | perl -pe \"s|git\\@github\\.com:|https://github.com/|\"); if [ "$(uname)" = "Darwin" ]; then open ${url}; else xdg-open ${url}; fi; }; f"
    github-pull-request = !bash -c 'git fetch origin pull/${1}/head:pr/${1} && git checkout pr/${1}' -

    ###
    # Gerrit helpers.
    gerrit-review = !bash -c 'git fetch origin refs/changes/"${1:${#1}-2}"/$1/$2 && git checkout -b review/$1/$2 FETCH_HEAD' -
    gerrit-push = "!f() { local branch=$(git current-branch); git push -u ${3:-origin} ${2:-HEAD}:$(git config branch.${branch}.merge | sed -e "s@refs/heads/@refs/${1}/@")/${4:-${branch}}; }; f"
    gerrit-publish = !git gerrit-push for
    gerrit-draft = !git gerrit-push drafts

    ###
    # Enclosed (subshelled) repositories.
    deactivate = !bash -c 'kill -9 $(ps -o ppid= -p ${PPID})'

    ###
    # Server commands.
    serve = daemon --reuseaddr --verbose  --base-path=. --export-all ./.git

    ###
    # Internal commands.
    debug = !GIT_PAGER= gdb --args git

[include]
    path = .gitconfig.local
